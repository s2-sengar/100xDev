/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs=require('fs')
const app = express();
const router=express.Router();

app.use(bodyParser.json());

const readToDos=()=>{
  return new Promise((resolve,reject)=>{
    fs.readFile('todos.json','utf-8',(err,res)=>{
      if(err) reject(err)
      else resolve(JSON.parse(res))
    })
  })
}

const updateToDos=(data)=>{
  return new Promise((resolve,reject)=>{
    fs.writeFile('todos.json',data,(err)=>{
      console.log(err)
      if(err) reject(err)
      else resolve()
    })
  })
}

router.route('/todos')
  .get(async(req,res)=>{
    try {
      let todos= await readToDos();
      res.status(200).json(todos)
    } catch (error) {
      res.status(500).json(error);
    }
  })
  .post(async(req,res)=>{
    try {  
      let {title,completed,description}=req.body;
      let todos=await readToDos();
      let lastId= todos.length ? todos.at(-1).id : 0;
      todos.push({
        id:(lastId*1)+1,
        title,completed,description
      })
      await updateToDos(JSON.stringify(todos));
      res.status(201).json({id:(lastId*1)+1})
    } catch (error) {
      res.status(500).json(error);
    }
  })

router.route('/todos/:id')
  .get(async(req,res)=>{
    try {
      let {id}=req.params;
      let todos=await readToDos();
      let todo=todos.filter(todo=>todo.id==id)?.[0] ?? null;
      if(todo){
        return res.status(200).json(todo)
      }
      return res.status(404).send()
    } catch (error) {
      
    }
  })
  .put(async(req,res)=>{
    try {
      let {id}=req.params;
      let {title,completed,description}=req.body;
      let todos=await readToDos();
      let updatedTodo=null;
      todos.forEach((todo)=>{
        if(todo.id==id){
          todo.title=title??todo.title
          todo.completed=completed??todo.completed
          todo.description=description??todo.description
          updatedTodo=todo
        }
      })
      if(updatedTodo){
        console.log(todos)
        await updateToDos(JSON.stringify(todos))
        return res.status(200).json(updatedTodo)
      }
      return res.status(404).send('Todo not found')
    } catch (error) {
      res.status(500).json(error);
    }
  })
  .delete(async(req,res)=>{
    try {
      let {id}=req.params;
      let todos=await readToDos();
      let prevSize=todos.length;
      todos=todos.filter(todo=>todo.id!=id)
      await updateToDos(JSON.stringify(todos));
      if(prevSize==todos.length){
        return res.status(404).send('Todo not found');
      }
      return res.status(200).json({msg:'item was found and deleted'})
    } catch (error) {
      res.status(500).json(error);
    }
  })



app.use(router)
// app.listen(3000)
module.exports = app;